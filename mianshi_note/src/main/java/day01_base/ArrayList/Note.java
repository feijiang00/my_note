package day01_base.ArrayList;

/**
 * @date 2021/12/15 0:28
 */
public class Note {
    /**
     * add方法扩容:
     * 无参生成的array初始长度为0
     * 第一次扩容为10的长度
     * 后面每次扩容都是1.5倍的长度，即扩容一半长度
     *
     * 但是addall则扩容机制又不一样，如果是addall（11个数），那就是扩容11个，
     * 其实就是没有元素时，扩容为Math.max(10，实际个数)
     *         有元素时，扩容为Math.max(扩容1.5倍，实际元素个数)
     *
     *
     * 迭代器两种模式:
     *      fail-fast:一但发现遍历的同时其他人来修改，则立刻抛出异常
     *      fail-safe:发现遍历时有人修改，则牺牲一致性让遍历运行完成，不抛出异常——copyonwriterarraylist
     *
     * linkedlist 和arraylist对比：
     * **LinkedList**
     *
     * 1. 基于双向链表，无需连续内存
     * 2. 随机访问慢（要沿着链表遍历）
     * 3. 头尾插入删除性能高
     * 4. 占用内存多
     *
     * **ArrayList**
     *
     * 1. 基于数组，需要连续内存
     * 2. 随机访问快（指根据下标访问）
     * 3. 尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低
     * 4. 可以利用 cpu 缓存，局部性原理
     *
     */
}
